setwd(datasciencecoursera)
dir()
nxt()
?list.files
args(list.files)
getwd(old.dir)
getwd("old.dir"")
old.dir <- /Users/tylerporter89
old.dir <- getwd("/Users/tylerporter89")
old.dir <- get()
setwd("old.dir"")
setwd
old.dir <-getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
setwd("old.dir")
setwd(dir = old.dir)
play()
setwd(dir = datasciencecoursera)
setwd(dir = "datasciencecoursera")
getwd()
list.dirs()
list.files
list.files()
dir.create("Swirl")
list.files()
setwd(dir = "Swirl")
getwd()
setwd(dir = "datasciencecoursera")
setwd(dir = "datasciencecoursera")
setwd(dir = datasciencecoursera)
setwd(dir = "tylerporter89")
?setwd()
getwd()
old.dir
setwd(dir = old.dir)
getwd()
list.files()
setwd(dir = "Documents")
getwd()
list.files()
setwd(dir = "/Users/tylerporter89")
getwd()
nxt()
1:20
pi:10
15:1
?`:`
play()
1:20
1:20, 2
seq(1:20)
seq(1:20, 2)
seq(2:20, 2)
nxt()
seq(1, 20)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
play()
?along
?along.with
?seq_along
seq(1, 10, length.out = 20)
seq(0, 10, length.out = 20)
seq(2, 10, length.out = 20)
seq(1, 10, length.out = 10)
seq(1, 10, length.out = 20)
nxt()
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
play()
(3 > 5) & (4 == 4)
(3 > 5) | (4 == 4)
nxt()
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
play()
my_char
paste(my_char, collapse = "")
my_char
nxt()
my_name <- c(my_char, "Tyler")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
play()
?sample
nxt()
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
play()
length(my_na) - sum(my_na)
!is.na(my_data)
sum(!is.na(my_data))
nxt()
my_data
0 / 0
Inf - Inf
x
play()
info(x)
nxt()
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[3, 5, 7]
x[c(3, 5, 7),]
c(x[3, 5, 7])
x[c(3, 5, 7), ]
x[c(3, 5, 7)]
play()
x[c(1, 2, 4)]
z
z <- c(x, y)
z
z <- c(x, y, nrow(10), ncol(6))
z
?nrow
z <- matrix(c(x, y), 10, 6)
z
z[,2]
z[c(,2, ,4)]
z[,2, !is.na(z)]
nxt()
x[0]
x[300]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 1, bar = 2, norf = NA)
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identicatl(vect, vect2)
identicatl("vect"", "vect2"")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
play()
my_vector[2,2]
my_vector[2,3]
nxt()
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix <- matrix(1:20, nrow = 4, ncol = 5)
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
my_matrix2 <- matrix(c(1:20), nrow = 4, ncol = 5)
my_matrix2 <- matrix(data = 1:20, nrow = 4, ncol = 5)
my_matrix2 <- matrix(1:20, 4, 5)
my_matrix2 <- matrix(c(1:20), 4, 5)
my_matrix2 <- matrix(c(1:20), nrow = 4, ncol = 5)
my_matrix2 <- matrix(data = 1:20, nrow = 4, ncol = 5)
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
info()
my_matrix2 <- matrix(1:20, 4, 5)
matrix(1:20, 4, 5)
my_matrix2 <- matrix(1:20, 4, 5)
my_matrix2 <- matrix(1:20, 5, 4)
my_matrix <- matrix
my_matrix2 <- matrix(1:20, 4, 5, FALSE)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames, my_data)
colnames(my_data, cnames)
?colnames
colnames(my_data) <- cnames
my_data
play()
my_data[1]
my_data[,1]
rownames(my_data)
colname(my_data)
colnames(my_data)
my_data[1:2]
my_data[,1]
my_data[ ,1]
my_data[1,2]
my_data[my_data(1:2)]
my_data[1:2]
my_data[1:3]
subset(my_data, 1:2)
my_data[c(1,4)]
?subset
my_data[row(2)]
nxt()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 != 7
!5 == 7
FALSE & FLASE
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2, 4, 5))
sumit()
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
play()
mean
nxt()
submit()
submit()
submit()
remainer(5)
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1, 6})
evaluate(function(x){x+1}, 6)
evaluate(function(x), c(8, 4, 0))
evaluate(function(x)x, c(8, 4, 0))
evaluate(function(x)x[1], c(8, 4, 0))
evaluate(function(x)x[3], c(8, 4, 0))
evaluate(function(x)length(x), c(8, 4, 0))
evaluate(function(x)x[-1], c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("I'm ready for bed")
submit()
submit()
submit()
mad_libs("home", "comfy", "dog")
submit()
submit()
submit()
%p%("I", "love", "R")
"I" %p% "love" %p% "R"
"I"%p%"love"%p%"R!"
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x)x[1], c(8, 4, 0))
evaluate(function(x)x[length(x)], c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
submit()
mad_libs("Disney World", "poopy", "egg plant")
submit()
"I" %p% "love" %p% "R!"
head(flags)
dim(flags)
play()
viewinfo(flags)
viewinfo("flags")
viewinfo()
nxt()
class(flags)
play()
?lapply
nxt()
cs_list <- lapply(flags, class)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date(1969-01-01)
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24""
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
play()
?strptime
nxt()
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
submit()
cube(3)
cube <- function(x, n) {}
cube(3)
cube(3)
submit()
cube(3)
cube(3)
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {}
x <- 1:10
if(x > 5) {
x <- 0
}
<- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
?with
?split
library(datasets)
data("mtcars")
mtcars
tapply(mtcars$hp, mtcars$cyl, mean)
round(abs(82.63636 - 209.21429), digits = 0)
dir()
setwd("datasciencecoursera")
list.dirs()
setwd("week 3 R Programming/ProgrammingAssignment2")
list.files()
setwd("cachematrix")
open("cachematrix.R")
open(cachematrix.R)
file.edit(cachematrix.R)
file.edit("cachematrix.R"")
?matrix.inverse
matrix.inverse()
square.matrix <- matrix(c(1, 0, 3, 2, 2, 4, 3, 2, 1), ncol = 3)
square.matrix
solve(square.matrix)
square.matrix <- matrix(c(4, 2, 7, 6), ncol = 2)
square.matrix
solve(square.matrix)
charater.matrix <- matrix(c("a", "b", "c", "d"), ncol = 2)
character.matrix
character.matrix <- matrix(c("a", "b", "c", "d"), ncol = 2)
character.matrix
class(character.matrix)
class(character.matrix[1,1])
square.matrix
solve(square.matrix)
inv                                                     # The function prints the inverse of the input object "x".
source('~/datasciencecoursera/week 3 R Programming/ProgrammingAssignment2/cachematrix.R')
x <- square.matrix
makeCacheMatrix(x)
cacheSolve(x)
source('~/datasciencecoursera/week 3 R Programming/ProgrammingAssignment2/cachematrix.R')
source('~/datasciencecoursera/week 3 R Programming/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(x)
cacheSolve(x)
source('~/datasciencecoursera/week 3 R Programming/ProgrammingAssignment2/cachematrix.R')
source('~/datasciencecoursera/week 3 R Programming/ProgrammingAssignment2/cachematrix.R')
source('~/datasciencecoursera/week 3 R Programming/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(x)
cacheSolve(x)
source('~/datasciencecoursera/week 3 R Programming/ProgrammingAssignment2/cachematrix.R')
cacheSolve(x)
source('~/datasciencecoursera/week 3 R Programming/ProgrammingAssignment2/cachematrix.R')
cacheSolve(x)
makeCacheMatrix(x)
source('~/datasciencecoursera/week 3 R Programming/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(x)
makeCacheMatrix(x)
x <- matrix(r, nrow = 1000, ncol = 1000)
r = rnorm(1000000)
x <- matrix(r, nrow = 1000, ncol = 1000)
makeCacheMatrix(x)
cacheSolve(x)
source('~/datasciencecoursera/week 3 R Programming/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(x)
cacheSolve(x)
source('~/datasciencecoursera/week 3 R Programming/ProgrammingAssignment2/cachematrix.R')
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getinverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
source('~/datasciencecoursera/week 3 R Programming/ProgrammingAssignment2/cachematrix.R')
source('~/datasciencecoursera/week 3 R Programming/ProgrammingAssignment2/cachematrix.R')
source('~/datasciencecoursera/week 3 R Programming/ProgrammingAssignment2/cachematrix.R')
